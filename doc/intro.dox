/**
 * @mainpage
 *
 * @section sec_1 Introduction
 *
 * This is a project which implements a userspace driver using sysfs interface
 * of the Linux to drive GPIOs.
 * 
 * It uses /sys/class/gpio/ and provides following APIs for any application
 * to control system and any other Expander GPIOs:
 *
 * 	1. gpio_device_t gpio_sysfs_driver_init(device_desc_t *desc);
 * 	2. void gpio_sysfs_driver_destroy(gpio_device_t device);
 * 	3. int gpio_setup(gpio_device_t device, int gpio, int dir);
 * 	4. int gpio_cleanup(gpio_device_t device, int gpio);
 * 	5. int gpio_set_value(gpio_device_t device, int gpio, int value);
 * 	6. int gpio_get_value(gpio_device_t device, int gpio);
 *
 * A maximum of MAX_DEVICE can be allocated and maintained by the driver.
 * Driver can provide device specific handles as requested by application to
 * manipulate system or expander GPIOs. For example -
 * A device named "dev_cpu" can be allocated for system GPIOs, while another
 * device named "dev_i2c_expander" can be allocated which deals with an I2C based
 * GPIO expander device. User can initialize driver multiple times for different
 * devices. User need to initialize driver by calling gpio_sysfs_driver_init() 
 * with a proper device descriptor pointed by "desc" as it's argument.
 * The descriptor should hold information about GPIO range, the requested device
 * can work on.
 *
 * An example application "gpio_app.c" is also available as a sample.
 *
 * Refer Section 3.1.4 for detailed description of above APIs.
 *
 */
